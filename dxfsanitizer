#!/usr/bin/python3

import ezdxf
import argparse

from ezdxf.algebra import Vector

parser = argparse.ArgumentParser(description='DXF sanitizer for laser cutter')
parser.add_argument('source')
parser.add_argument('target')
parser.add_argument('--debug', action='store_true')
parser.add_argument('--ignore', help="ignore unknown DXF types", action='store_true')

args = parser.parse_args()

DEBUG = print if args.debug else lambda x : None

source = ezdxf.readfile(args.source)
target = ezdxf.new('AC1015')
target.header['$AUNITS'] = source.header['$AUNITS'] if '$AUNITS' in source.header else 0

entities = [ entity for entity in source.entities ]
for entity in entities:
    if entity.dxf.layer == '0':
        if entity.dxftype() == 'LINE':
            DEBUG("LINE start:%s end:%s" % (entity.dxf.start, entity.dxf.end))
            target.modelspace().add_line(entity.dxf.start, entity.dxf.end)
        elif entity.dxftype() == 'CIRCLE':
            DEBUG('CIRCLE center:%s radius:%s' % (entity.dxf.center, entity.dxf.radius))
            target.modelspace().add_circle(entity.dxf.center, entity.dxf.radius)
        elif entity.dxftype() == 'ARC':
            DEBUG('ARC center:%s radius:%s start_angle:%s end_angle:%s' % (entity.dxf.center, entity.dxf.radius, entity.dxf.start_angle, entity.dxf.end_angle))
            DEBUG('    extrusion: %s' % (str(entity.dxf.extrusion)))
            target.modelspace().add_arc(entity.dxf.center, entity.dxf.radius, entity.dxf.start_angle, entity.dxf.end_angle)
        elif entity.dxftype() == 'INSERT':
            DEBUG('INSERT "%s" at %s scale:%s' % (entity.dxf.name, entity.dxf.insert, entity.dxf.xscale))
            block = source.blocks.get(entity.dxf.name)
            assert entity.dxf.xscale == entity.dxf.yscale, "scale with aspect ration != 1 is not supported"
            assert entity.dxf.row_count != 1, "row_count is not supported"
            assert entity.dxf.column_count != 1, "column_count is not supported"
            for block_entity in block:
                if block_entity.dxftype() == 'LINE':
                    start = Vector(block_entity.dxf.start).rot_z_deg(entity.dxf.rotation) * entity.dxf.xscale + Vector(entity.dxf.insert)
                    end = Vector(block_entity.dxf.end).rot_z_deg(entity.dxf.rotation) * entity.dxf.xscale + Vector(entity.dxf.insert)
                    DEBUG("    LINE start:%s end:%s" % (start, end))
                    target.modelspace().add_line(start, end)
                elif block_entity.dxftype() == 'CIRCLE':
                    center = Vector(block_entity.dxf.center).rot_z_deg(entity.dxf.rotation) * entity.dxf.xscale + Vector(entity.dxf.insert)
                    radius = block_entity.dxf.radius * entity.dxf.xscale
                    DEBUG("    CIRCLE center:%s radius:%s" % (center, radius))
                    target.modelspace().add_circle(center, radius)
                elif block_entity.dxftype() == 'ARC':
                    center = Vector(block_entity.dxf.center).rot_z_deg(entity.dxf.rotation) * entity.dxf.xscale + Vector(entity.dxf.insert)
                    radius = block_entity.dxf.radius * entity.dxf.xscale
                    start_angle = block_entity.dxf.start_angle + entity.dxf.rotation
                    end_angle = block_entity.dxf.end_angle + entity.dxf.rotation
                    DEBUG('ARC center:%s radius:%s start_angle:%s end_angle:%s' % (center, radius, start_angle, end_angle))
                    target.modelspace().add_arc(center, radius, start_angle, end_angle)
                else:
                    if args.ignore:
                        DEBUG('%s ignored' % (block_entity.dxftype()))
                    else:
                        raise Exception('DXF type %s is not supported' % (block_entity.dxftype()))
        else:
            if args.ignore:
                DEBUG('%s ignored' % (entity.dxftype()))
            else:
                raise Exception('DXF type %s is not supported' % (entity.dxftype()))

target.saveas(args.target)
